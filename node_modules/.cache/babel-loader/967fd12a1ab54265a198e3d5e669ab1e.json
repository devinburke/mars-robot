{"ast":null,"code":"import _classCallCheck from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js\";\nimport React, { Component } from 'react';\nimport Cell from './cell';\nvar CELL_SIZE = 50;\nvar Hello = React.forwardRef(function (props, ref) {\n  return React.createElement(\"input\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  });\n});\n\nvar Grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grid, _Component);\n\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this));\n    _this.state = {\n      cells: []\n    };\n\n    _this.setRef = function (ref) {\n      console.log(\"ASDGADSADS\");\n\n      _this.cellRefs.push(ref);\n    };\n\n    _this.state = {\n      cells: [],\n      data: [{\n        name: \"abc\"\n      }, {\n        name: \"def\"\n      }]\n    };\n    _this.cellRefs = [];\n    _this.createCells = _this.createCells.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"getCoordinateCenter\",\n    value: function getCoordinateCenter(x, y) {// const rect = this.boardRef.getBoundingClientRect();\n      // const doc = document.documentElement;\n      // return {\n      //     x: (rect.left + window.pageXOffset) - doc.clientLeft,\n      //     y: (rect.top + window.pageYOffset) - doc.clientTop,\n      // };\n    }\n  }, {\n    key: \"makeCells\",\n    value: function makeCells() {\n      var cells = [];\n\n      for (var y = 0; y < this.props.height; y++) {\n        for (var x = 0; x < this.props.width; x++) {\n          if (this.board[y][x]) {\n            cells.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onRef(undefined);\n    }\n  }, {\n    key: \"moveRobot\",\n    value: function moveRobot(initialX, initialY, movement) {\n      this.moveToInitial(initialX, initialY);\n      console.log(this);\n    }\n  }, {\n    key: \"moveToInitial\",\n    value: function moveToInitial(x, y) {}\n  }, {\n    key: \"createCells\",\n    value: function createCells(cell) {\n      return React.createElement(Cell, {\n        x: cell.x,\n        y: cell.y,\n        ref: this.setRef,\n        key: \"\".concat(cell.x, \",\").concat(cell.y),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Board\",\n        style: {\n          width: this.props.width * CELL_SIZE + 1,\n          height: this.props.height * CELL_SIZE + 1,\n          backgroundSize: \"\".concat(CELL_SIZE, \"px \").concat(CELL_SIZE, \"px\")\n        },\n        ref: function ref(n) {\n          _this2.boardRef = n;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.data.map(function (_ref) {\n        var name = _ref.name;\n        return React.createElement(Hello, {\n          placeholder: name,\n          ref: _this2.setRef,\n          key: name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nexport default Grid;","map":{"version":3,"sources":["/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js"],"names":["React","Component","Cell","CELL_SIZE","Hello","forwardRef","props","ref","Grid","state","cells","setRef","console","log","cellRefs","push","data","name","createCells","bind","x","y","height","width","board","onRef","undefined","initialX","initialY","movement","moveToInitial","cell","backgroundSize","n","boardRef","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './cell';\n\nconst CELL_SIZE = 50;\n\nconst Hello = React.forwardRef((props,  ref) => <input ref={ref} />);\n\n\nclass Grid extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      cells: [],\n      data: [\n        {\n          name: \"abc\"\n        },\n        { name: \"def\" }\n      ]\n    }\n\n    this.cellRefs = [];\n\n    this.createCells = this.createCells.bind(this)\n  }\n\n  state = {\n    cells: []\n  }\n  \n  getCoordinateCenter(x, y) {\n\n    \n    // const rect = this.boardRef.getBoundingClientRect();\n    // const doc = document.documentElement;\n\n    // return {\n    //     x: (rect.left + window.pageXOffset) - doc.clientLeft,\n    //     y: (rect.top + window.pageYOffset) - doc.clientTop,\n    // };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.props.height; y++) {\n        for (let x = 0; x < this.props.width; x++) {\n            if (this.board[y][x]) {\n                cells.push({ x, y });\n            }\n        }\n    }\n\n    return cells;\n  }\n\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined)\n  }\n\n  moveRobot(initialX, initialY, movement)\n  {\n    this.moveToInitial(initialX, initialY);\n\n    console.log(this);\n  }\n\n  moveToInitial(x, y)\n  {\n    \n  }\n\n  setRef = (ref) => {\n    console.log(\"ASDGADSADS\");\n    this.cellRefs.push(ref);\n  };\n\n  createCells(cell)\n  {\n    return <Cell x={cell.x} y={cell.y} ref={this.setRef} key={`${cell.x},${cell.y}`}/>;\n  }\n\n  render() {\n    return (\n    <div className=\"Board\"\n      style={{ width: (this.props.width * CELL_SIZE) + 1, height: (this.props.height * CELL_SIZE) + 1, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n        ref={(n) => { this.boardRef = n; }}>\n\n        {/* {this.state.cells.map(({ cell }) => (\n          <Cell \n            x={cell.x}\n            y={cell.y}\n            ref={this.setRef} \n            key={cell.x + ',' + cell.y} />\n        ))} */}\n\n        {this.state.data.map(({ name }) => (\n          <Hello \n            placeholder={name} \n            ref={this.setRef} \n            key={name} />\n        ))}\n\n        {/* <Cell x={1} y={1} ref={'1' + ',' + '1'}/>\n        <Cell x={cell.x} y={cell.y} ref={cell.x + ',' + cell.y}/>\n        <Cell x={cell.x} y={cell.y} ref={cell.x + ',' + cell.y}/>\n        <Cell x={cell.x} y={cell.y} ref={cell.x + ',' + cell.y}/> */}\n        {/* {cells.map(this.createCells)} */}\n    </div>\n    );\n  }\n\n\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}