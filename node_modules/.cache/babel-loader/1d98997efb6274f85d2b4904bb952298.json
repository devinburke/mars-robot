{"ast":null,"code":"import _classCallCheck from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js\";\nimport React, { Component } from 'react';\nimport Cell from './cell';\nvar CELL_SIZE = 50;\n\nvar Grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grid, _Component);\n\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this));\n    _this.state = {\n      cells: []\n    };\n    _this.cellRefs = [];\n    _this.state = {\n      cells: []\n    };\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"getCoordinateCenter\",\n    value: function getCoordinateCenter(x, y) {// const rect = this.boardRef.getBoundingClientRect();\n      // const doc = document.documentElement;\n      // return {\n      //     x: (rect.left + window.pageXOffset) - doc.clientLeft,\n      //     y: (rect.top + window.pageYOffset) - doc.clientTop,\n      // };\n    }\n  }, {\n    key: \"makeCells\",\n    value: function makeCells() {\n      var cells = [];\n\n      for (var y = 0; y < this.props.height; y++) {\n        for (var x = 0; x < this.props.width; x++) {\n          if (this.board[y][x]) {\n            cells.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onRef(undefined);\n    }\n  }, {\n    key: \"moveRobot\",\n    value: function moveRobot(initialX, initialY, movement) {\n      console.log(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cells = this.state.cells;\n      return React.createElement(\"div\", {\n        className: \"Board\",\n        style: {\n          width: this.props.width * CELL_SIZE + 1,\n          height: this.props.height * CELL_SIZE + 1,\n          backgroundSize: \"\".concat(CELL_SIZE, \"px \").concat(CELL_SIZE, \"px\")\n        },\n        ref: function ref(n) {\n          _this2.boardRef = n;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, cells.map(function (cell) {\n        return React.createElement(Cell, {\n          x: cell.x,\n          y: cell.y,\n          ref: function ref(n) {\n            console.log(\"WWW\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nexport default Grid;","map":{"version":3,"sources":["/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js"],"names":["React","Component","Cell","CELL_SIZE","Grid","props","state","cells","cellRefs","x","y","height","width","board","push","onRef","undefined","initialX","initialY","movement","console","log","backgroundSize","n","boardRef","map","cell"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,SAAS,GAAG,EAAlB;;IAEMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB;AADiB,UAUnBC,KAVmB,GAUX;AACNC,MAAAA,KAAK,EAAE;AADD,KAVW;AAGjB,UAAKC,QAAL,GAAgB,EAAhB;AAEA,UAAKF,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AALiB;AAQlB;;;;wCAMmBE,C,EAAGC,C,EAAG,CAGxB;AACA;AAEA;AACA;AACA;AACA;AACD;;;gCAEW;AACV,UAAIH,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,aAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWO,KAA/B,EAAsCH,CAAC,EAAvC,EAA2C;AACvC,cAAI,KAAKI,KAAL,CAAWH,CAAX,EAAcD,CAAd,CAAJ,EAAsB;AAClBF,YAAAA,KAAK,CAACO,IAAN,CAAW;AAAEL,cAAAA,CAAC,EAADA,CAAF;AAAKC,cAAAA,CAAC,EAADA;AAAL,aAAX;AACH;AACJ;AACJ;;AAED,aAAOH,KAAP;AACD;;;wCAEmB;AAClB,WAAKF,KAAL,CAAWU,KAAX,CAAiB,IAAjB;AACD;;;2CAEsB;AACrB,WAAKV,KAAL,CAAWU,KAAX,CAAiBC,SAAjB;AACD;;;8BAESC,Q,EAAUC,Q,EAAUC,Q,EAC9B;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;;;6BAEQ;AAAA;;AAAA,UACCd,KADD,GACW,KAAKD,KADhB,CACCC,KADD;AAGP,aACA;AAAK,QAAA,SAAS,EAAC,OAAf;AACE,QAAA,KAAK,EAAE;AAAEK,UAAAA,KAAK,EAAG,KAAKP,KAAL,CAAWO,KAAX,GAAmBT,SAApB,GAAiC,CAA1C;AAA6CQ,UAAAA,MAAM,EAAG,KAAKN,KAAL,CAAWM,MAAX,GAAoBR,SAArB,GAAkC,CAAvF;AAA0FmB,UAAAA,cAAc,YAAKnB,SAAL,gBAAoBA,SAApB;AAAxG,SADT;AAEI,QAAA,GAAG,EAAE,aAACoB,CAAD,EAAO;AAAE,UAAA,MAAI,CAACC,QAAL,GAAgBD,CAAhB;AAAoB,SAFtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIKhB,KAAK,CAACkB,GAAN,CAAU,UAAAC,IAAI;AAAA,eACX,oBAAC,IAAD;AAAM,UAAA,CAAC,EAAEA,IAAI,CAACjB,CAAd;AAAiB,UAAA,CAAC,EAAEiB,IAAI,CAAChB,CAAzB;AAA4B,UAAA,GAAG,EAAE,aAACa,CAAD,EAAO;AAAEH,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAAqB,WAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA,OAAd,CAJL,CADA;AAUD;;;;EAlEgBpB,S;;AAuEnB,eAAeG,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './cell';\n\nconst CELL_SIZE = 50;\n\nclass Grid extends Component {\n  constructor(props) {\n    super();\n\n    this.cellRefs = [];\n\n    this.state = {\n      cells: []\n    }\n  }\n\n  state = {\n    cells: []\n  }\n  \n  getCoordinateCenter(x, y) {\n\n    \n    // const rect = this.boardRef.getBoundingClientRect();\n    // const doc = document.documentElement;\n\n    // return {\n    //     x: (rect.left + window.pageXOffset) - doc.clientLeft,\n    //     y: (rect.top + window.pageYOffset) - doc.clientTop,\n    // };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.props.height; y++) {\n        for (let x = 0; x < this.props.width; x++) {\n            if (this.board[y][x]) {\n                cells.push({ x, y });\n            }\n        }\n    }\n\n    return cells;\n  }\n\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined)\n  }\n\n  moveRobot(initialX, initialY, movement)\n  {\n    console.log(this);\n  }\n\n  render() {\n    const { cells } = this.state;\n\n    return (\n    <div className=\"Board\"\n      style={{ width: (this.props.width * CELL_SIZE) + 1, height: (this.props.height * CELL_SIZE) + 1, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n        ref={(n) => { this.boardRef = n; }}>\n\n        {cells.map(cell => (\n            <Cell x={cell.x} y={cell.y} ref={(n) => { console.log(\"WWW\"); }}/>\n        ))}\n    </div>\n    );\n  }\n\n\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}