{"ast":null,"code":"import _classCallCheck from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devinburke/Documents/test_front_ends/mars-robots/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js\";\nimport React, { Component } from 'react';\nimport Cell from '.cell';\nvar CELL_SIZE = 20;\nvar WIDTH = 800;\nvar HEIGHT = 600;\n\nvar Grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Grid, _Component);\n\n  function Grid() {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this));\n    _this.state = {\n      cells: [],\n      isRunning: false,\n      interval: 100\n    };\n    _this.rows = HEIGHT / CELL_SIZE;\n    _this.cols = WIDTH / CELL_SIZE;\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"getElementOffset\",\n    value: function getElementOffset() {\n      var rect = this.boardRef.getBoundingClientRect();\n      var doc = document.documentElement;\n      return {\n        x: rect.left + window.pageXOffset - doc.clientLeft,\n        y: rect.top + window.pageYOffset - doc.clientTop\n      };\n    }\n  }, {\n    key: \"makeCells\",\n    value: function makeCells() {\n      var cells = [];\n\n      for (var y = 0; y < this.rows; y++) {\n        for (var x = 0; x < this.cols; x++) {\n          if (this.board[y][x]) {\n            cells.push({\n              x: x,\n              y: y\n            });\n          }\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onRef(undefined);\n    }\n  }, {\n    key: \"create\",\n    value: function create(width, height) {}\n  }, {\n    key: \"moveRobot\",\n    value: function moveRobot(initialX, initialY, movement) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cells = this.state.cells;\n      return React.createElement(\"div\", {\n        className: \"Board\",\n        style: {\n          width: WIDTH,\n          height: HEIGHT,\n          backgroundSize: \"\".concat(CELL_SIZE, \"px \").concat(CELL_SIZE, \"px\")\n        },\n        onClick: this.handleClick,\n        ref: function ref(n) {\n          _this2.boardRef = n;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, cells.map(function (cell) {\n        return React.createElement(Cell, {\n          x: cell.x,\n          y: cell.y,\n          key: \"\".concat(cell.x, \",\").concat(cell.y),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Grid;\n}(Component);\n\nexport default Grid;","map":{"version":3,"sources":["/Users/devinburke/Documents/test_front_ends/mars-robots/src/components/grid.js"],"names":["React","Component","Cell","CELL_SIZE","WIDTH","HEIGHT","Grid","state","cells","isRunning","interval","rows","cols","rect","boardRef","getBoundingClientRect","doc","document","documentElement","x","left","window","pageXOffset","clientLeft","y","top","pageYOffset","clientTop","board","push","props","onRef","undefined","width","height","initialX","initialY","movement","backgroundSize","handleClick","n","map","cell"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,OAAjB;AAEA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,KAAK,GAAG,GAAd;AACA,IAAMC,MAAM,GAAG,GAAf;;IAEMC,I;;;;;AACJ,kBAAc;AAAA;;AAAA;;AACZ;AADY,UAMdC,KANc,GAMN;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KANM;AAEZ,UAAKC,IAAL,GAAYN,MAAM,GAAGF,SAArB;AACA,UAAKS,IAAL,GAAYR,KAAK,GAAGD,SAApB;AAHY;AAIb;;;;uCAQkB;AACjB,UAAMU,IAAI,GAAG,KAAKC,QAAL,CAAcC,qBAAd,EAAb;AACA,UAAMC,GAAG,GAAGC,QAAQ,CAACC,eAArB;AAEA,aAAO;AACHC,QAAAA,CAAC,EAAGN,IAAI,CAACO,IAAL,GAAYC,MAAM,CAACC,WAApB,GAAmCN,GAAG,CAACO,UADvC;AAEHC,QAAAA,CAAC,EAAGX,IAAI,CAACY,GAAL,GAAWJ,MAAM,CAACK,WAAnB,GAAkCV,GAAG,CAACW;AAFtC,OAAP;AAID;;;gCAEW;AACV,UAAInB,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,IAAzB,EAA+Ba,CAAC,EAAhC,EAAoC;AAChC,aAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,IAAzB,EAA+BO,CAAC,EAAhC,EAAoC;AAChC,cAAI,KAAKS,KAAL,CAAWJ,CAAX,EAAcL,CAAd,CAAJ,EAAsB;AAClBX,YAAAA,KAAK,CAACqB,IAAN,CAAW;AAAEV,cAAAA,CAAC,EAADA,CAAF;AAAKK,cAAAA,CAAC,EAADA;AAAL,aAAX;AACH;AACJ;AACJ;;AAED,aAAOhB,KAAP;AACD;;;wCAEmB;AAClB,WAAKsB,KAAL,CAAWC,KAAX,CAAiB,IAAjB;AACD;;;2CAEsB;AACrB,WAAKD,KAAL,CAAWC,KAAX,CAAiBC,SAAjB;AACD;;;2BAEMC,K,EAAOC,M,EACd,CAEC;;;8BAESC,Q,EAAUC,Q,EAAUC,Q,EAC9B,CAEC;;;6BAEQ;AAAA;;AAAA,UACC7B,KADD,GACW,KAAKD,KADhB,CACCC,KADD;AAGP,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AACE,QAAA,KAAK,EAAE;AAAEyB,UAAAA,KAAK,EAAE7B,KAAT;AAAgB8B,UAAAA,MAAM,EAAE7B,MAAxB;AAAgCiC,UAAAA,cAAc,YAAKnC,SAAL,gBAAoBA,SAApB;AAA9C,SADT;AAEE,QAAA,OAAO,EAAE,KAAKoC,WAFhB;AAGE,QAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AAAE,UAAA,MAAI,CAAC1B,QAAL,GAAgB0B,CAAhB;AAAoB,SAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGhC,KAAK,CAACiC,GAAN,CAAU,UAAAC,IAAI;AAAA,eACX,oBAAC,IAAD;AAAM,UAAA,CAAC,EAAEA,IAAI,CAACvB,CAAd;AAAiB,UAAA,CAAC,EAAEuB,IAAI,CAAClB,CAAzB;AAA4B,UAAA,GAAG,YAAKkB,IAAI,CAACvB,CAAV,cAAeuB,IAAI,CAAClB,CAApB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA,OAAd,CALH,CADF;AAWD;;;;EApEgBvB,S;;AAyEnB,eAAeK,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cell from '.cell';\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nclass Grid extends Component {\n  constructor() {\n    super();\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n  }\n\n  state = {\n    cells: [],\n    isRunning: false,\n    interval: 100,\n  }\n  \n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n        x: (rect.left + window.pageXOffset) - doc.clientLeft,\n        y: (rect.top + window.pageYOffset) - doc.clientTop,\n    };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n        for (let x = 0; x < this.cols; x++) {\n            if (this.board[y][x]) {\n                cells.push({ x, y });\n            }\n        }\n    }\n\n    return cells;\n  }\n\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined)\n  }\n\n  create(width, height)\n  {\n \n  }\n\n  moveRobot(initialX, initialY, movement)\n  {\n \n  }\n\n  render() {\n    const { cells } = this.state;\n\n    return (\n      <div className=\"Board\"\n        style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n        onClick={this.handleClick}\n        ref={(n) => { this.boardRef = n; }}>\n\n        {cells.map(cell => (\n            <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n        ))}\n    </div>\n    );\n  }\n\n\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}